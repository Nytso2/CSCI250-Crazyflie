        # Find contours
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            largest = max(contours, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(largest)
            M = cv2.moments(largest)
        
            if M["m00"] != 0 and radius > 5:  # Filter out small noise
                cX = int(M["m10"] / M["m00"])
                cY = int(M["m01"] / M["m00"])
                
                # Draw a red dot at the center
                cv2.circle(img_bgr, (cX, cY), 5, (0, 0, 255), -1)
                cv2.putText(img_bgr, "Center", (cX - 20, cY - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 255), 1)
        
                # Draw the enclosing circle
                cv2.circle(img_bgr, (int(x), int(y)), int(radius), (255, 255, 0), 2)
                cv2.putText(img_bgr, f"Radius: {int(radius)}", (cX + 10, cY + 10), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 0), 1)
        
                # Optional: Adjust behavior based on ball size (radius)
                print(f"xDiff: {cX - width // 2}, yDiff: {cY - height // 2}, radius: {radius}")
        
                # Control updates
                xDiff = cX - width // 2
                yDiff = cY - height // 2
                height_diff_desired -= yDiff * 0.001
                yaw_desired -= xDiff * 0.002
                height_desired += height_diff_desired * dt
        
                # Draw crosshairs
                cv2.line(img_bgr, (0, height // 2), (width, height // 2), (0, 255, 0), 2)
                cv2.line(img_bgr, (width // 2, 0), (width // 2, height), (255, 0, 0), 2)
                        
                print(f"Ball radius: {radius:.2f} pixels")
